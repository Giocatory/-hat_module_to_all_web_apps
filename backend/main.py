from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import google.generativeai as genai
import os
import re
from dotenv import load_dotenv
import logging

from knowledge_base import knowledge_base

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

load_dotenv()

app = FastAPI()

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Gemini —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
gemini_api_key = os.getenv("GEMINI_API_KEY")
if not gemini_api_key:
    logger.warning("GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è. Gemini –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω.")
    model = None
else:
    try:
        genai.configure(api_key=gemini_api_key)
        model = genai.GenerativeModel('gemini-flash-2.5')
        logger.info("Gemini —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Gemini: {str(e)}")
        model = None

class Message(BaseModel):
    text: str

def preprocess_text(text: str) -> str:
    """–û—á–∏—Å—Ç–∫–∞ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞"""
    text = text.lower().strip()
    text = re.sub(r'[^\w\s]', ' ', text)
    text = re.sub(r'\s+', ' ', text)
    return text

def find_in_knowledge_base(user_input: str) -> str:
    user_input = preprocess_text(user_input)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π
    greeting_words = ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ', '–Ω–∞—á–∞—Ç—å', 'start', 'hello', 'hi']
    if any(word in user_input for word in greeting_words) and len(user_input.split()) < 4:
        return knowledge_base["–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"]["default"]
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    general_questions = ['—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å', '—á—Ç–æ –º–æ–∂–µ—à—å', '—Ç–≤–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏', '—Ñ—É–Ω–∫—Ü–∏–∏']
    if any(question in user_input for question in general_questions):
        return "–Ø –º–æ–≥—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ —Ä–∞–±–æ—Ç–µ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞: —Ç–µ—Ä–º–∏–Ω—ã, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –≤—ã–ø–ª–∞—Ç—ã, Planfix, –≤–æ—Ä–∫—à–æ–ø—ã –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å –æ —á–µ–º-—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º!"
    
    # –ü–æ–∏—Å–∫ –≤ —Ç–µ—Ä–º–∏–Ω–∞—Ö
    for term, definition in knowledge_base["—Ç–µ—Ä–º–∏–Ω—ã"].items():
        if term in user_input:
            return f"üìö {term.upper()}: {definition}"
    
    # –ü–æ–∏—Å–∫ –≤ –≤–æ–ø—Ä–æ—Å–∞—Ö
    best_match = None
    max_matches = 0
    
    for question, answer in knowledge_base["–≤–æ–ø—Ä–æ—Å—ã"].items():
        question_words = set(preprocess_text(question).split())
        input_words = set(user_input.split())
        matches = len(question_words.intersection(input_words))
        
        if matches > max_matches and matches > 0:
            max_matches = matches
            best_match = answer
    
    if best_match:
        return best_match
    
    return None

@app.post("/chat")
async def chat_endpoint(message: Message):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –≤–æ–ø—Ä–æ—Å: {message.text}")
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
    kb_response = find_in_knowledge_base(message.text)
    
    if kb_response:
        logger.info("–û—Ç–≤–µ—Ç –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π")
        return {"response": kb_response}
    
    # –ï—Å–ª–∏ –≤ –±–∞–∑–µ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞ –∏ Gemini –¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if model is not None:
        try:
            logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ–º Gemini –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞")
            prompt = f"""–¢—ã - –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤ –≤ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ CompanyName. 
            –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ —Ç–æ–ª—å–∫–æ –ø–æ —Ä–∞–±–æ—á–∏–º –≤–æ–ø—Ä–æ—Å–∞–º.
            
            –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞:
            - CompanyName - –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è
            - –ù–∞—Å—Ç–∞–≤–Ω–∏–∫–∏ –ø—Ä–æ–≤–æ–¥—è—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è —Å–æ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏
            - –†–∞–±–æ—Ç–∞ —Å—Ç—Ä–æ–∏—Ç—Å—è —á–µ—Ä–µ–∑ Planfix
            - –ï—Å—Ç—å –≥—Ä–µ–π–¥—ã: —é–Ω–ª–∏–Ω–≥, –¥–∂–µ–¥–∞–π-–ø–∞–¥–∞–≤–∞–Ω, –¥–∂–µ–¥–∞–π-—Ä—ã—Ü–∞—Ä—å, –¥–∂–µ–¥–∞–π-–º–∞—Å—Ç–µ—Ä, –≥—Ä–∞–Ω–¥-–º–∞—Å—Ç–µ—Ä
            - –í–∞–∂–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã: –û–° (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å), —Å–ª–æ—Ç (–≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏—è), –≤–æ—Ä–∫—à–æ–ø—ã (–ö–ö –í–®, –ü–ü –í–®, –ê–î –í–®)
            
            –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –ø–æ —Ä–∞–±–æ—Ç–µ –∏–ª–∏ —Ç—ã –Ω–µ –∑–Ω–∞–µ—à—å –æ—Ç–≤–µ—Ç - –≤–µ–∂–ª–∏–≤–æ –æ—Ç–∫–∞–∂–∏—Å—å –æ—Ç–≤–µ—á–∞—Ç—å.
            
            –í–æ–ø—Ä–æ—Å: {message.text}
            
            –ö—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç:"""
            
            response = model.generate_content(prompt)
            if response.text:
                logger.info("–£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Gemini")
                return {"response": response.text}
            else:
                logger.warning("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç Gemini")
                raise Exception("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Gemini: {str(e)}")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫ fallback –æ—Ç–≤–µ—Ç—É
    
    # Fallback –æ—Ç–≤–µ—Ç
    fallback_responses = [
        "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –Ω–∞—à–µ–ª –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫—É—Ä–∞—Ç–æ—Ä–∞–º –≤ –±–æ—Ç.",
        "–≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–æ—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –µ–≥–æ –∫—É—Ä–∞—Ç–æ—Ä–∞–º —á–µ—Ä–µ–∑ –±–æ—Ç.",
        "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫ –∫—É—Ä–∞—Ç–æ—Ä–∞–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏."
    ]
    
    import random
    return {"response": random.choice(fallback_responses)}

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ API"""
    status = {
        "status": "healthy",
        "gemini_available": model is not None,
        "knowledge_base_entries": len(knowledge_base["—Ç–µ—Ä–º–∏–Ω—ã"]) + len(knowledge_base["–≤–æ–ø—Ä–æ—Å—ã"])
    }
    return status

@app.get("/")
async def root():
    return {"message": "Chat API for CompanyName is running", "version": "1.0"}

if __name__ == "__main__":
    import uvicorn

    uvicorn.run(app, host="0.0.0.0", port=8000)
